v0.x
====
- Implementar mecanismo de transformação
  > Modelo genérico simples
    - Mesmo papel do AutoMapper, porém genérico e independente apesar de simples
    - Uso: 
      1) Cria-se uma classe que implementa ITransformer<From, To>
      2) Registra o gerente de transformação genérico GenericTransformationManager
         services.AddGenericTransformationManager();
         - Por padrão procura-se por ITransformer<> em todos os assembles do domínio
         - Pode-se adicionar outros assembles a procurar com uma sobrecarga:
         services.AddGenericTransformationManager(new[]{"Meu.Outro", "Assemble.Novo"});
      3) Usa-se no construtor (ITransformationManager manager)
         manager.Transform<From, To>()
  > Modelo baseado em AutoMapper
    - Usa o AutoMapper para resolver as transformações
    - Uso:
      1) Registra-se os mapeamentos do AutoMapper como de costume, usando AutoMapper.Profile
         ou outros meios de sua preferência
      2) Registra o gerente de transformação AutoMapperTransformationManager
      3) Usa-se no construtor (ITransformationManager manager)
         manager.Transform<From, To>()
- Implementar validação de modelo (IModelValidator)

v1.0
====
- Remover abstração própria de DI em favor de Microsoft.Extensions.DependencyInjection.Abstractions
- Remover necessidade de objetos de assinatura
  > IDataModuleSignature
  > IStorageSignature
- Repensar DataModule<>. Talvez usar a idéia de BusinessService e DataService?
  (ou StorageService, PersistenceService)
- Renomear Storage para Store?
- Implementar Data.Dapper
  > Implementar suporte a SQL puro
  > IDataFilter, Sorter, Get(), Find(), Search(), etc.
- Mover este TODO.txt para um projeto no GitHub

v2.0
====
- Implementar internacionalização/localização
- Estabilizar conceito de BusinessObject
- Utilizar operações de Bulk com alguma biblioteca ao invés iteração simples

vNext
=====
- Implementar Data para cenário na nuvem
- Implementar Data para cenário em sistema de arquivos
- Implementar conceito criptografia de dado sensível
  > A idéia é um mecanismo que permita a criptografia e descriptografia de dados sensíveis
  > como Códigos passados por URL. Teríamos um tipo [EncryptedValue], e todos objetos que
  > fossem utilizar o conceito, escreveriam um um conversor implícito/explícito.
