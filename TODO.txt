v1.0
====
- Segregar IStorageReader:
  > Permitir FluentQuery em objetos segregados
- Segregar IStorageWriter:
  > Permitir FluentWriter para objetos segregados
- Mover alguns itens de Infrastructure para Core
  > service.AddArchitectureCore();
- Implementar validação de modelo (IModelValidator)
  > Será possível algum tipo de relacionamento com IRule, RuleFor<> e RuleSet<>?
  > Revisar RuleFor<> e RuleSet<> para ver se talvez nem seja prciso de um IModelValidator
- Remover necessidade de objetos de assinatura
  > IDataModuleSignature
  > IStorageSignature
  > IBusinessFeatureSignature
  > IBusinessFacadeSignature
- Repensar DataModule<>. Talvez usar a idéia de BusinessService e DataService?
  (ou StorageService, PersistenceService)
- Implementar Data.Dapper
  > Implementar suporte a SQL puro
  > IDataFilter, Sorter, Get(), Find(), Search(), etc.
  > https://github.com/sqlkata/querybuilder
- Implementar Data.MongoDB
- Sobre mecanismo de transformação
  > Modelo baseado em AutoMapper
    - Usa o AutoMapper para resolver as transformações
    - Uso:
      1) Registra-se os mapeamentos do AutoMapper como de costume, usando AutoMapper.Profile
         ou outros meios de sua preferência
      2) Registra o gerente de transformação AutoMapperTransformationManager
      3) Usa-se no construtor (ITransformationManager manager)
         manager.Transform<From, To>()
- Mover este TODO.txt para um projeto no GitHub
- Implementar internacionalização/localização
- Adicionar templates de projetos para `dotnet new`

v2.0
====
- Utilizar operações de Bulk com alguma biblioteca ao invés iteração simples
- Padronizar nomes de componentes principais (UnitOfWork, Rule, RuleFor, RuleSet, BusinessFeature, etc)
  para condizer com "padrões de projeto" conhecidos (design pattern)
- Renomear Storage para Store?
  > Remover "alias"
  > Hoje abstrações segregadas só existem para IStorageX
 
vNext
=====
- Implementar Data para cenário na nuvem
- Implementar Data para cenário em sistema de arquivos
- Implementar conceito criptografia de dado sensível
  > A idéia é um mecanismo que permita a criptografia e descriptografia de dados sensíveis
  > como Códigos passados por URL. Teríamos um tipo [EncryptedValue], e todos objetos que
  > fossem utilizar o conceito, escreveriam um um conversor implícito/explícito.
