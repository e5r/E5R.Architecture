v0.x
====
- Implementar validação de modelo (IModelValidator)
- Gerenciador de notificações genérico
  > Implementar opção ZeroMQ (ou RabbitMQ)
- Implementar mecanismo de transformação
  > Modelo genérico simples
    - Mesmo papel do AutoMapper, porém genérico e independente apesar de simples
    - Uso: 
      1) Cria-se uma classe que implementa ITransformer<From, To>
      2) Registra o gerente de transformação genérico GenericTransformationManager
         services.AddGenericTransformationManager();
      3) Usa-se no construtor (ITransformationManager manager)
         manager.Transform<From, To>()
  > Modelo baseado em AutoMapper
    - Usa o AutoMapper para resolver as transformações
    - Uso:
      1) Registra-se os mapeamentos do AutoMapper como de costume, usando AutoMapper.Profile
         ou outros meios de sua preferência
      2) Registra o gerente de transformação AutoMapperTransformationManager
      3) Usa-se no construtor (ITransformationManager manager)
         manager.Transform<From, To>()
- Remover abstração própria de DI em favor de Microsoft.Extensions.DependencyInjection.Abstractions
- Implementar ILazy<> para carregento preguiçoso de objetos nos construtores
  ```
  class LazyInjection<T>
  {
      private readonly IServiceProvider _provider;

      LazyInjection(IServiceProvider provider){}

      public T Value => _provider.GetRequiredService<T>();
  }
  ```
- Implementar FluentWriter()
  > Em IStorageWriter<> e IStorageBulkWriter<>
  > API sugerida:
  ```
  _storage.FluentWriter()
          .Create(new DataModel{}) || Replace(new DataModel{}) || Remove(new DataModel{})
          .BulkCreate(new[] {newDataModel{}}) || BulkReplace(new[] {new DataModel{}}) || BulkRemove(new[]{new DataModel{}})
          ;
         
  _storage.FluentWriter()
          .Identifier(1) || Identifier(new[] { 1, 2 })
          .Remove()
          .Update(new {}) || Update(u => new { Field = u.Field })
          ;
         
  _storage.FluentWriter()
          .Filter(f => w.Field == 2)
          .BulkRemove()
          .BulkUpdate(new {}) || BulkUpdate(u => new { Field = u.Field })
          ;
  ```
  
- Mover este TODO.txt para um projeto no GitHub

v1.0
====
- Implementar validação
- Remover necessidade de objetos de assinatura
  > IDataModuleSignature
  > IStorageSignature
- Repensar DataModule<>. Talvez usar a idéia de BusinessService e DataService?
  (ou StorageService, PersistenceService)
- Renomear Storage para Store?
- Implementar Data.Dapper
  > Implementar suporte a SQL puro
  > IDataFilter, Sorter, Get(), Find(), Search(), etc.
- Publicar documentação online
  > API
  > Tutoriais

v2.0
====
- Implementar internacionalização/localização
- Estabilizar conceito de BusinessObject
- Utilizar operações de Bulk com alguma biblioteca ao invés iteração simples

vNext
=====
- Implementar Data para cenário na nuvem
- Implementar Data para cenário em sistema de arquivos
- Implementar conceito criptografia de dado sensível
  > A idéia é um mecanismo que permita a criptografia e descriptografia de dados sensíveis
  > como Códigos passados por URL. Teríamos um tipo [EncryptedValue], e todos objetos que
  > fossem utilizar o conceito, escreveriam um um conversor implícito/explícito.
